const inquirer = require('inquirer');
const { Pool } = require('pg');
const { viewDepartments, viewRoles, viewEmployees } = require('./db_queries');

const pool = new Pool(
    {
        user: 'postgres',
        password: 'Hunter123!',
        host: 'localhost',
        database: 'employee_db'
    },
    console.log()
)

pool.connect();

const addDepartment = (start) =>
    inquirer
        .prompt([
            {
                type: 'input',
                name: 'newDepartment',
                message: 'What is the name of the department you would like to add?',
            }
        ])
        .then((response) => {
            const sql = `INSERT INTO department (name) VALUES ($1)`;
            const params = response.newDepartment;

            console.log(params)

            pool.query(sql, [params], (err, result) => {
                if (err) {
                    console.log(err);
                }
                viewDepartments(start);
            });
        })



const addRole = (start) => {
    let departmentArray = []

    pool.query('SELECT name AS name, id AS value FROM department', function (err, { rows }) {
        if (err) {
            console.log(err)
        }
        rows.forEach(departmentOptions => {
            departmentArray.push(departmentOptions)
        });
    })

    inquirer
        .prompt([
            {
                type: 'input',
                name: 'newTitle',
                message: 'What is the name of the role you would like to add?',
            },
            {
                type: 'input',
                name: 'newSalary',
                message: 'What is the salary you would like to assign to this role?',
            },
            {
                type: 'list',
                name: 'expectedDepartment',
                message: 'Which department will this role be under?',
                choices: departmentArray
            }
        ])
        .then((newRole) => {
            const sql = `INSERT INTO role (title, salary, department_id) VALUES ($1, $2, $3)`;
            const title = newRole.newTitle
            const salary = newRole.newSalary;
            const department = newRole.expectedDepartment;

            pool.query(sql, [title, salary, department], (err, result) => {
                if (err) {
                    console.log(err);
                }
                viewRoles(start)
            })

        })
}

const addEmployee = (start) => {
    let roleArray = []
    let employeeArray = [{ name: 'None', value: null }]

    pool.query('SELECT title AS name, id AS value FROM role', function (err, { rows }) {
        if (err) {
            console.log(err)
        }
        rows.forEach(roleOptions => {
            roleArray.push(roleOptions)
        });
    })
    pool.query(`SELECT CONCAT(employee.first_name, ' ', employee.last_name) AS name, id AS value FROM employee`, function (err, { rows }) {
        if (err) {
            console.log(err)
        }
        rows.forEach(managerOptions => {
            employeeArray.push(managerOptions)
        });
    })

    inquirer
        .prompt([
            {
                type: 'input',
                name: 'newFirstName',
                message: 'What is the first name of the employee you would like to add?',
            },
            {
                type: 'input',
                name: 'newLastName',
                message: 'What is the last name of the employee you would like to add?',
            },
            {
                type: 'list',
                name: 'selectedRole',
                message: 'What is this employees role?',
                choices: roleArray
            },
            {
                type: 'list',
                name: 'selectedManager',
                message: 'Does this employee have a manager?',
                choices: employeeArray
            },
        ])
        .then((newEmployee) => {
            const sql = `INSERT INTO employee (first_name, last_name, role_id, manager_id) VALUES ($1, $2, $3, $4)`;
            const firstName = newEmployee.newFirstName
            const lastName = newEmployee.newLastName;
            const roleName = newEmployee.selectedRole;
            const manager = newEmployee.selectedManager;

            pool.query(sql, [firstName, lastName, roleName, manager], (err, result) => {
                if (err) {
                    console.log(err);
                }
                viewEmployees(start);
            })
        })
};


const updateEmployee = (start) => {
    let roleArray = [];
    let currentEmployeeArray = [{ name: 'None', value: null }]

    pool.query('SELECT title AS name, id AS value FROM role', function (err, { rows }) {
        if (err) {
            console.log(err)
        }
        rows.forEach(roleOptions => {
            roleArray.push(roleOptions)
        });
    })

    pool.query(`SELECT CONCAT(employee.first_name, ' ', employee.last_name) AS name, id AS value FROM employee`, function (err, { rows }) {
        if (err) {
            console.log(err)
        }
        rows.forEach(employeeList => {
            currentEmployeeArray.push(employeeList)
        });

        inquirer
            .prompt([

                {
                    type: 'list',
                    name: 'selectedEmployee',
                    message: 'Which employee would you like to update?',
                    choices: currentEmployeeArray
                },
                {
                    type: 'list',
                    name: 'selectedRole',
                    message: 'Which role needs to be assigned to this employee?',
                    choices: roleArray
                },

            ])
            .then((newEmployeeRole) => {
                const sql = `UPDATE employee SET role_id = $1 WHERE id = $2`;
                const employee = newEmployeeRole.selectedEmployee;
                const role = newEmployeeRole.selectedRole;

                console.log(employee, role)

                pool.query(sql, [role, employee], (err, result) => {
                    if (err) {
                        console.log(err);
                    }
                    viewEmployees(start);
                })
            })
    })



    // inquirer
    //     .prompt([
    //         {
    //             type: 'confirm',
    //             name: 'updateConfirm',
    //             message: `Are you sure you would like to update an employee's role?`,
    //         },
    //         {
    //             type: 'list',
    //             name: 'selectedEmployee',
    //             message: 'Which employee would you like to update?',
    //             choices: currentEmployeeArray
    //         },
    //         {
    //             type: 'list',
    //             name: 'selectedRole',
    //             message: 'Which role needs to be assigned to this employee?',
    //             choices: roleArray
    //         },

    //     ])
    //     .then((newEmployeeRole) => {
    //         const sql = `UPDATE employee SET role_id = $1 WHERE id = $2`;
    //         const employee = newEmployeeRole.selectedEmployee;
    //         const role = newEmployeeRole.selectedRole;

    //         console.log(employee, role)

    //         pool.query(sql, [role, employee], (err, result) => {
    //             if (err) {
    //                 console.log(err);
    //             }
    //             viewEmployees(start);
    //         })
    //     })
};

module.exports = { addDepartment, addRole, addEmployee, updateEmployee }